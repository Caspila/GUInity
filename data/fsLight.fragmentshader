#version 400

uniform vec3 ambientLightColor ;
uniform float ambientLightIntensity ;
uniform mat4 model ;
uniform vec3 lightPos ;
uniform vec3 lightIntensity ;
uniform sampler2D _textureSampler;
uniform vec3 _difuseColor ;

in vec3 fragVert;
in vec3 fragNormal;
in vec2 UV;


out vec4 finalColor;

void main(){
	//calculate normal in world coordinates
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vec3 normal = normalize(normalMatrix * fragNormal);
    
    //calculate the location of this fragment (pixel) in world coordinates
    vec3 fragPosition = vec3(model * vec4(fragVert, 1));
    
    //calculate the vector from this pixels surface to the light source
    vec3 surfaceToLight = lightPos - fragPosition;

    //calculate the cosine of the angle of incidence
    float brightness = dot(normal, surfaceToLight) / (length(surfaceToLight) * length(normal));
    brightness = clamp(brightness, 0, 1);

    //calculate final color of the pixel, based on:
    // 1. The angle of incidence: brightness
    // 2. The color/intensities of the light: light.intensities
    // 3. The texture and texture coord: texture(tex, fragTexCoord)
    // vec4 surfaceColor = texture(tex, fragTexCoord);

	vec3 ambientLight = ambientLightColor * ambientLightIntensity;

    finalColor = vec4(brightness * lightIntensity + ambientLight , 1) * vec4(_difuseColor.rgb,1);
	//finalColor = vec4(finalColor.xyz + +ambientLight,1);
	//finalColor = vec4(1,1,1,1);

    //finalColor = finalColor * vec4(texture( _textureSampler, UV ).rgb,1);
	finalColor = finalColor * texture( _textureSampler, UV ).rgba;
    //finalColor = vec4(texture( _textureSampler, UV ).rgb,1);
}